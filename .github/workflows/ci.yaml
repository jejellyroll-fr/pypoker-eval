name: Build and Package Python Project with Python 3.11

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
      - development
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - master
      - development

jobs:
  # build-linux-arm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install build tools and dependencies (ARM64)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y cmake make gcc-aarch64-linux-gnu g++-aarch64-linux-gnu python3.11 python3.11-dev

  #     - name: Build the project (ARM64)
  #       run: |
  #         mkdir build-arm64
  #         cd build-arm64
  #         cmake -DCMAKE_TOOLCHAIN_FILE=../arm-toolchain.cmake -DPython3_EXECUTABLE=/usr/bin/python3.11 -DPython3_INCLUDE_DIR=/usr/include/python3.11 -DPython3_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.11.so ..
  #         make

  #     - name: Make artifact executable (ARM64)
  #       run: chmod +x build-arm64/*

  #     - name: Create artifact package
  #       run: |
  #         cp pokereval.py build-arm64/
  #         cp test.py build-arm64/
  #         cp build-arm64/libpypokereval.so build-arm64/_pokereval_3_11.so

  #     - name: Upload artifact 
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: poker-eval-linux-arm64
  #         path: build-arm64/*

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        build-method: ['uv', 'python']
    name: Linux Python ${{ matrix.python-version }} (${{ matrix.build-method }})
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake make

      - name: Install uv (if needed)
        if: matrix.build-method == 'uv'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "FORCE_BUILD_METHOD=uv" >> $GITHUB_ENV

      - name: Set build method
        if: matrix.build-method == 'python'
        run: |
          echo "FORCE_BUILD_METHOD=python" >> $GITHUB_ENV

      - name: Build project and create wheel
        env:
          MATRIX_PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          set -e
          python build_wheel.py

      - name: Validate artifacts
        env:
          MATRIX_PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          set -e
          PYTHON_VER=$(echo "${{ matrix.python-version }}" | sed 's/\.//')
          
          echo "=== Artifact Validation ==="
          echo "Expected Python: ${{ matrix.python-version }}"
          echo "Build method: ${{ matrix.build-method }}"
          echo "Expected extension: _pokereval_${PYTHON_VER}.so"
          
          # Check if extension was built
          if [ -f "_pokereval_${PYTHON_VER}.so" ]; then
            echo "✅ Extension found: _pokereval_${PYTHON_VER}.so"
            ls -la _pokereval_${PYTHON_VER}.so
          else
            echo "❌ Extension missing: _pokereval_${PYTHON_VER}.so"
            echo "Available files:"
            ls -la _pokereval_*.so || echo "No .so files found"
            exit 1
          fi
          
          # Check wheel was created
          if [ -f dist/*.whl ]; then
            echo "✅ Wheel created:"
            ls -la dist/*.whl
          else
            echo "❌ Wheel missing"
            exit 1
          fi
          
          # Basic import test if possible
          if command -v python${{ matrix.python-version }} >/dev/null 2>&1; then
            echo "=== Testing import with Python ${{ matrix.python-version }} ==="
            python${{ matrix.python-version }} -c "import sys; print(f'Using Python {sys.version}')"
            python${{ matrix.python-version }} -c "import _pokereval_${PYTHON_VER}; print('✅ Extension imports OK')" || echo "⚠️  Extension import failed"
          fi

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: dist/*.whl

      - name: Upload binary artifact (legacy)
        run: |
          PYTHON_VER=$(echo "${{ matrix.python-version }}" | sed 's/\.//')
          mkdir -p legacy-build/
          cp pokereval.py legacy-build/
          cp test.py legacy-build/
          if [ -f "_pokereval_${PYTHON_VER}.so" ]; then
            cp _pokereval_${PYTHON_VER}.so legacy-build/
          fi
        
      - name: Upload legacy artifact
        uses: actions/upload-artifact@v4
        with:
          name: poker-eval-linux-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: legacy-build/*

  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        build-method: ['uv', 'python']
    name: Windows Python ${{ matrix.python-version }} (${{ matrix.build-method }})
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          git submodule update --init --recursive

      - name: Install uv (if needed)
        if: matrix.build-method == 'uv'
        shell: pwsh
        run: |
          try {
            Invoke-RestMethod https://astral.sh/uv/install.ps1 | Invoke-Expression
            $env:PATH += ";$env:USERPROFILE\.local\bin"
            echo "FORCE_BUILD_METHOD=uv" >> $env:GITHUB_ENV
          } catch {
            Write-Error "Failed to install uv"
            exit 1
          }

      - name: Set build method
        if: matrix.build-method == 'python'
        run: echo "FORCE_BUILD_METHOD=python" >> $env:GITHUB_ENV

      - name: Set UTF-8 encoding
        if: runner.os == 'Windows'
        run: chcp 65001
        shell: cmd

      - name: Build project and create wheel
        env:
          MATRIX_PYTHON_VERSION: ${{ matrix.python-version }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $env:PYTHONUTF8 = "1"
          python build_wheel.py

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: dist/*.whl

      - name: Upload binary artifact (legacy)
        shell: pwsh
        run: |
          $pythonVersionShort = "${{ matrix.python-version }}".Replace('.', '')
          New-Item -ItemType Directory -Force -Path "legacy-build"
          Copy-Item pokereval.py legacy-build/
          Copy-Item test.py legacy-build/
          if (Test-Path "_pokereval_$pythonVersionShort.pyd") {
            Copy-Item "_pokereval_$pythonVersionShort.pyd" "legacy-build/"
          }
        
      - name: Upload legacy artifact
        uses: actions/upload-artifact@v4
        with:
          name: poker-eval-windows-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: legacy-build/*

  build-on-macos:
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        build-method: ['uv', 'python']
    name: macOS Intel Python ${{ matrix.python-version }} (${{ matrix.build-method }})
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cmake

      - name: Install uv (if needed)
        if: matrix.build-method == 'uv'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "FORCE_BUILD_METHOD=uv" >> $GITHUB_ENV

      - name: Set build method
        if: matrix.build-method == 'python'
        run: |
          echo "FORCE_BUILD_METHOD=python" >> $GITHUB_ENV

      - name: Build project and create wheel
        env:
          MATRIX_PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          python build_wheel.py

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-intel-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: dist/*.whl

      - name: Upload binary artifact (legacy)
        run: |
          PYTHON_VER=$(echo "${{ matrix.python-version }}" | sed 's/\.//')
          mkdir -p legacy-build/
          cp pokereval.py legacy-build/
          cp test.py legacy-build/
          if [ -f "_pokereval_${PYTHON_VER}.so" ]; then
            cp _pokereval_${PYTHON_VER}.so legacy-build/
          fi
        
      - name: Upload legacy artifact
        uses: actions/upload-artifact@v4
        with:
          name: poker-eval-macos-intel-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: legacy-build/*

  build-on-macos-arm:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        build-method: ['uv', 'python']
    name: macOS ARM Python ${{ matrix.python-version }} (${{ matrix.build-method }})
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cmake

      - name: Install uv (if needed)
        if: matrix.build-method == 'uv'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "FORCE_BUILD_METHOD=uv" >> $GITHUB_ENV

      - name: Set build method
        if: matrix.build-method == 'python'
        run: |
          echo "FORCE_BUILD_METHOD=python" >> $GITHUB_ENV

      - name: Build project and create wheel
        env:
          MATRIX_PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          python build_wheel.py

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-arm-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: dist/*.whl

      - name: Upload binary artifact (legacy)
        run: |
          PYTHON_VER=$(echo "${{ matrix.python-version }}" | sed 's/\.//')
          mkdir -p legacy-build/
          cp pokereval.py legacy-build/
          cp test.py legacy-build/
          if [ -f "_pokereval_${PYTHON_VER}.so" ]; then
            cp _pokereval_${PYTHON_VER}.so legacy-build/
          fi
        
      - name: Upload legacy artifact
        uses: actions/upload-artifact@v4
        with:
          name: poker-eval-macos-arm-py${{ matrix.python-version }}-${{ matrix.build-method }}
          path: legacy-build/*

  # ============================================================================
  # COLLECTION JOB - Collect all artifacts
  # ============================================================================
  collect-artifacts:
    name: Collect All Artifacts
    needs: [build-linux, build-windows, build-on-macos, build-on-macos-arm]
    runs-on: ubuntu-latest
    if: always() && (needs.build-linux.result == 'success' || needs.build-windows.result == 'success' || needs.build-on-macos.result == 'success' || needs.build-on-macos-arm.result == 'success')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts/

    - name: Display artifact structure
      run: |
        echo "=== Artifact Structure ==="
        find all-artifacts/ -type f | sort
        echo ""
        echo "=== Build Summary ==="
        find all-artifacts/ -name "*.so" -o -name "*.pyd" | wc -l | xargs echo "Number of binaries:"
        find all-artifacts/ -name "*.whl" | wc -l | xargs echo "Number of wheels:"

    - name: Create release package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p release-package/wheels release-package/binaries
        
        # Create comprehensive README
        cat > release-package/README.md << 'EOL'
        # PyPoker-Eval Multi-Platform Release

        This release contains pre-compiled binaries and wheels for multiple platforms.

        ## Installation Options

        ### Option 1: Using Wheels (Recommended for uv users)
        Install with uv: uv pip install pypoker_eval-*.whl
        Install with pip: pip install pypoker_eval-*.whl

        ### Option 2: Using Binaries (Legacy)  
        1. Download the appropriate binary for your platform
        2. Place it in the same folder as pokereval.py
        3. Import normally: import pokereval

        ## Supported Platforms

        ### Wheels Available
        - Linux: Python 3.9, 3.10, 3.11, 3.12
        - Windows: Python 3.9, 3.10, 3.11, 3.12  
        - macOS Intel: Python 3.9, 3.10, 3.11, 3.12
        - macOS ARM: Python 3.9, 3.10, 3.11, 3.12

        ### Legacy Binaries Available
        Same platforms as wheels, for direct usage.

        Total: 32 wheels + 32 binaries = 64 artifacts (16 uv + 16 python builds each)

        ## Usage with uv
        This release is fully compatible with uv Python environments!
        EOL
        
        # Copy all wheels
        find all-artifacts/ -name "*.whl" -exec cp {} release-package/wheels/ \;
        
        # Copy all binaries  
        find all-artifacts/ -name "*.so" -exec cp {} release-package/binaries/ \;
        find all-artifacts/ -name "*.pyd" -exec cp {} release-package/binaries/ \;
        
        # Copy Python files (from any artifact)
        find all-artifacts/ -name "pokereval.py" -exec cp {} release-package/ \; | head -1
        find all-artifacts/ -name "test.py" -exec cp {} release-package/ \; | head -1
        
        # Summary
        echo ""
        echo "=== Release Package Summary ==="
        echo "Wheels: $(find release-package/wheels/ -name '*.whl' | wc -l)"
        echo "Binaries: $(find release-package/binaries/ -name '*.so' -o -name '*.pyd' | wc -l)"

    - name: Upload release package
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: pypoker-eval-complete-release
        path: release-package/*


  github-release:
    name: Create GitHub Release
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download release package
      uses: actions/download-artifact@v4
      with:
        name: pypoker-eval-complete-release
        path: release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        name: PyPoker-Eval ${{ github.ref_name }}
        body: |
          ## Multi-Platform Release
          
          This automatic release contains pre-compiled binaries and wheels for:
          
          ### Supported Platforms
          - **Linux** (x86_64)
          - **Windows** (x64) 
          - **macOS Intel** (x86_64)
          - **macOS ARM** (arm64)
          
          ### Supported Python Versions
          - Python 3.9
          - Python 3.10  
          - Python 3.11
          - Python 3.12
          
          **Total: 32 different configurations** ✨
          - 16 builds with uv
          - 16 builds with standard Python
          
          ### Installation
          
          **Option 1: Using Wheels (Recommended)**
          ```bash
          # With uv
          uv pip install pypoker_eval-*.whl
          
          # With pip  
          pip install pypoker_eval-*.whl
          ```
          
          **Option 2: Using Binaries (Legacy)**
          1. Download the binary for your platform
          2. Place it in the same folder as `pokereval.py`
          3. Use normally with `import pokereval`
          
          ### uv Compatibility
          This release is fully compatible with uv Python environments!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
